/* Generated By:JavaCC: Do not edit this line. parserTS.java */
package behaviourComposition.parser.transitionSystem;
import behaviourComposition.structure.*;
import behaviourComposition.ai.*;
import java.util.*;
import structures.* ;
@SuppressWarnings("all")
public class parserTS implements parserTSConstants {

        TransitionSystem TS = new TransitionSystem();
        ArraySetList <String> setState=new ArraySetList<String>();
        HashSet <String> setStateFinal=new HashSet<String>();
        String stateInitial=new String();
        HashSet <String[]> setAction=new HashSet<String[]>();

        State s,st;

        public TransitionSystem createTS() throws ParseException, Exception{
                this.start();
                return TS;
        }

  final public void start() throws ParseException, Exception {
                              Token t1; String strNameTs;
    jj_consume_token(DIG);
    t1 = jj_consume_token(IDENTIFIER);
                         strNameTs=t1.image;
    jj_consume_token(PGA);
    transition();
    jj_consume_token(PGC);
    jj_consume_token(0);
  }

  final public void transition() throws ParseException, Exception {
                                   Token t1,t2,t3; String str1, str2, str3;State s1,s2; Action a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ARW);
      t2 = jj_consume_token(IDENTIFIER);
         str1=t1.image; str2=t2.image;
      jj_consume_token(PQA);
      jj_consume_token(LABEL);
      jj_consume_token(EQ);
      jj_consume_token(VGT);
      t3 = jj_consume_token(IDENTIFIER);
                                     str3=t3.image;
      jj_consume_token(VGT);
      jj_consume_token(PQC);
                setAction.add(new String[]{str1,str2,str3});
                setState.add(str1);
                setState.add(str2);
      transition();
      break;
    case PQA:
      initialState();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void initialState() throws ParseException, Exception {
                                     Token t;String str;
    jj_consume_token(PQA);
    jj_consume_token(IN);
    jj_consume_token(EQ);
    jj_consume_token(PGA);
    t = jj_consume_token(IDENTIFIER);
         str=t.image;
         stateInitial=str;
    jj_consume_token(PGC);
         Iterator itState=setState.iterator();
                while(itState.hasNext()){
                        String state=(String)itState.next();
                        boolean isInitial=stateInitial.equals(state);
                        boolean isFinal=setStateFinal.contains(state);
                        //TS.addState(factory.createSimpleState(state,isInitial,isFinal));
                        int statenum = TS.addState(state);
                        if(isInitial)
                        {
                                TS.setStartState(statenum);
                        }
                        if(isFinal)
                        {
                                TS.setFinalState(statenum);
                        }
                }
                Iterator itAction=setAction.iterator();
                while(itAction.hasNext()){
                        String[] actionStr=(String[])itAction.next();
                        //Action action=factory.createSimpleAction(actionStr[2],TS.getState(actionStr[0]),TS.getState(actionStr[1]));
                        Action action = new Action(actionStr[2]);
                        TS.addTransition(TS.getStateNumber(actionStr[0]),TS.getStateNumber(actionStr[1]),action);
                }
    jj_consume_token(PQC);
  }

  /** Generated Token Manager. */
  public parserTSTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1100,};
   }

  /** Constructor with InputStream. */
  public parserTS(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parserTS(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserTSTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parserTS(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserTSTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parserTS(parserTSTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserTSTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
